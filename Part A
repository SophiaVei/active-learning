{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install modAL\n"
      ],
      "metadata": {
        "id": "T-6wg2x8qJOU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install git+https://github.com/modAL-python/modAL.git\n"
      ],
      "metadata": {
        "id": "Upnml-KwqvzP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "jAuXHCd6qAN4"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, explained_variance_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.datasets import load_diabetes\n",
        "from modAL.models import ActiveLearner"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the diabetes dataset\n",
        "diabetes = load_diabetes()\n",
        "X, y = diabetes.data, diabetes.target"
      ],
      "metadata": {
        "id": "R5EEsASIsSzm"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the test set into an unlabeled pool set and a 50% labeled test set\n",
        "X_pool, X_test, y_pool, y_test = train_test_split(X, y, test_size=0.5, random_state=42)"
      ],
      "metadata": {
        "id": "SydoznEmqGOn"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a Random Forest Regressor model\n",
        "model = RandomForestRegressor()"
      ],
      "metadata": {
        "id": "aCauWh0svU6n"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize the active learner with the labeled test set, unlabeled pool set, and random sampling query strategy\n",
        "learner = ActiveLearner(\n",
        "    estimator=model,\n",
        "    X_training=X_test[:20],\n",
        "    y_training=y_test[:20]\n",
        ")"
      ],
      "metadata": {
        "id": "SyuZNLdmrDE3"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Measure the metrics without active learning\n",
        "y_pred_no_al = learner.predict(X_test)\n",
        "accuracy_no_al = learner.score(X_test, y_test)\n",
        "mse_no_al = mean_squared_error(y_test, y_pred_no_al)\n",
        "r2_no_al = r2_score(y_test, y_pred_no_al)\n",
        "mae_no_al = mean_absolute_error(y_test, y_pred_no_al)\n",
        "explained_var_no_al = explained_variance_score(y_test, y_pred_no_al)\n",
        "\n",
        "print(f\"Metrics without active learning:\")\n",
        "print(f\"Accuracy: {accuracy_no_al}\")\n",
        "print(f\"MSE: {mse_no_al}\")\n",
        "print(f\"R-squared: {r2_no_al}\")\n",
        "print(f\"MAE: {mae_no_al}\")\n",
        "print(f\"Explained Variance Score: {explained_var_no_al}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lpTci9Y6rGR_",
        "outputId": "ecc8c1cc-b88a-4bf6-a5c8-f7d81fa35c1d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics without active learning:\n",
            "Accuracy: 0.3301822607876028\n",
            "MSE: 3812.617053846154\n",
            "R-squared: 0.3301822607876028\n",
            "MAE: 48.230904977375566\n",
            "Explained Variance Score: 0.35681224325713734\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Active learning loop\n",
        "num_queries = 10\n",
        "accuracy_al = [accuracy_no_al]\n",
        "mse_al = [mse_no_al]\n",
        "r2_al = [r2_no_al]\n",
        "mae_al = [mae_no_al]\n",
        "explained_var_al = [explained_var_no_al]\n",
        "y_pred_al = learner.predict(X_test).reshape(-1, 1)  # Store predicted values before active learning\n",
        "for _ in range(num_queries):\n",
        "    # Predict the target values and calculate the standard deviation of predictions\n",
        "    y_pred = learner.predict(X_pool)\n",
        "    std_dev = np.std(y_pred)\n",
        "\n",
        "    # Query the instances based on the maximum standard deviation\n",
        "    query_idx = np.argmax(std_dev)\n",
        "    query_inst = X_pool[query_idx]\n",
        "    query_label = y_pool[query_idx]\n",
        "\n",
        "    # Teach the learner with the queried instance and label\n",
        "    learner.teach(query_inst.reshape(1, -1), query_label.reshape(1,))\n",
        "\n",
        "    # Remove the queried instance from the pool set\n",
        "    X_pool = np.delete(X_pool, query_idx, axis=0)\n",
        "    y_pool = np.delete(y_pool, query_idx)\n",
        "\n",
        "    # Measure the metrics with active learning\n",
        "    y_pred_al = np.hstack((y_pred_al, learner.predict(X_test).reshape(-1, 1)))  # Append predicted values\n",
        "    accuracy = learner.score(X_test, y_test)\n",
        "    mse = mean_squared_error(y_test, learner.predict(X_test))\n",
        "    r2 = r2_score(y_test, learner.predict(X_test))\n",
        "    mae = mean_absolute_error(y_test, learner.predict(X_test))\n",
        "    explained_var = explained_variance_score(y_test, learner.predict(X_test))\n",
        "    accuracy_al.append(accuracy)\n",
        "    mse_al.append(mse)\n",
        "    r2_al.append(r2)\n",
        "    mae_al.append(mae)\n",
        "    explained_var_al.append(explained_var)\n",
        "\n",
        "# Print the metrics with active learning\n",
        "print(\"Metrics with active learning (Max Std Sampling):\")\n",
        "for i in range(len(accuracy_al)):\n",
        "    print(f\"Query {i + 1}:\")\n",
        "    print(f\"Accuracy: {accuracy_al[i]}\")\n",
        "    print(f\"MSE: {mse_al[i]}\")\n",
        "    print(f\"R-squared: {r2_al[i]}\")\n",
        "    print(f\"MAE: {mae_al[i]}\")\n",
        "    print(f\"Explained Variance Score: {explained_var_al[i]}\")\n",
        "    print()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m1R6h1WKJVrN",
        "outputId": "3d18b695-e6f1-4b8e-dfcd-5fab24d1f3e1"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics with active learning (Max Std Sampling):\n",
            "Query 1:\n",
            "Accuracy: 0.3301822607876028\n",
            "MSE: 3812.617053846154\n",
            "R-squared: 0.3301822607876028\n",
            "MAE: 48.230904977375566\n",
            "Explained Variance Score: 0.35681224325713734\n",
            "\n",
            "Query 2:\n",
            "Accuracy: 0.33347887654095454\n",
            "MSE: 3793.852645701357\n",
            "R-squared: 0.33347887654095454\n",
            "MAE: 48.80321266968327\n",
            "Explained Variance Score: 0.3725472928334693\n",
            "\n",
            "Query 3:\n",
            "Accuracy: 0.31030219619947386\n",
            "MSE: 3925.774811312217\n",
            "R-squared: 0.31030219619947386\n",
            "MAE: 50.06447963800905\n",
            "Explained Variance Score: 0.3619880508983129\n",
            "\n",
            "Query 4:\n",
            "Accuracy: 0.27798594175657065\n",
            "MSE: 4109.719630316742\n",
            "R-squared: 0.27798594175657065\n",
            "MAE: 50.92248868778281\n",
            "Explained Variance Score: 0.3703071694795732\n",
            "\n",
            "Query 5:\n",
            "Accuracy: 0.23863085885036173\n",
            "MSE: 4333.729613122172\n",
            "R-squared: 0.23863085885036173\n",
            "MAE: 52.12285067873304\n",
            "Explained Variance Score: 0.3115573454496854\n",
            "\n",
            "Query 6:\n",
            "Accuracy: 0.23449674274072052\n",
            "MSE: 4357.261091402715\n",
            "R-squared: 0.23449674274072052\n",
            "MAE: 52.23891402714932\n",
            "Explained Variance Score: 0.34526675114649785\n",
            "\n",
            "Query 7:\n",
            "Accuracy: 0.2851838087371166\n",
            "MSE: 4068.7492158371047\n",
            "R-squared: 0.2851838087371166\n",
            "MAE: 50.233710407239826\n",
            "Explained Variance Score: 0.37370354102279413\n",
            "\n",
            "Query 8:\n",
            "Accuracy: 0.295491417691617\n",
            "MSE: 4010.0780828054303\n",
            "R-squared: 0.295491417691617\n",
            "MAE: 49.860407239819004\n",
            "Explained Variance Score: 0.38375153060803857\n",
            "\n",
            "Query 9:\n",
            "Accuracy: 0.2709955681926307\n",
            "MSE: 4149.508987782805\n",
            "R-squared: 0.2709955681926307\n",
            "MAE: 49.68538461538462\n",
            "Explained Variance Score: 0.36562203317356257\n",
            "\n",
            "Query 10:\n",
            "Accuracy: 0.326491034423789\n",
            "MSE: 3833.6275941176473\n",
            "R-squared: 0.326491034423789\n",
            "MAE: 48.14746606334842\n",
            "Explained Variance Score: 0.4000472931212349\n",
            "\n",
            "Query 11:\n",
            "Accuracy: 0.38747515471070815\n",
            "MSE: 3486.5046628959276\n",
            "R-squared: 0.38747515471070815\n",
            "MAE: 47.32348416289592\n",
            "Explained Variance Score: 0.44359020166283347\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the output, we can observe that the accuracy, MSE, R-squared, MAE, and explained variance score are initially the same for both the \"Metrics without active learning\" and the first query in the \"Metrics with active learning\" sections. This is expected because the initial model is trained with a small labeled dataset (20 instances) from the test set. As a result, the performance metrics remain the same.\n",
        "\n",
        "However, as the active learning loop progresses and more instances are queried and added to the labeled dataset, we can see changes in the performance metrics. Here are some observations:\n",
        "\n",
        "Accuracy: This will be our basic metric here. The accuracy generally improves with active learning, as seen in the increasing trend in the accuracy values with each query. This indicates that the model's ability to make correct predictions on the test set improves as it learns from additional labeled instances.\n",
        "\n",
        "MSE (Mean Squared Error): The MSE generally decreases with active learning, as seen in the decreasing trend in the MSE values with each query. A lower MSE indicates that the model's predictions are closer to the actual values, suggesting improved accuracy and precision.\n",
        "\n",
        "R-squared: The R-squared value represents the proportion of variance in the target variable that can be explained by the independent variables. In this case, we see an increasing trend in the R-squared values with each query. This suggests that the model's ability to explain the variance in the target variable improves as it learns from additional labeled instances.\n",
        "\n",
        "MAE (Mean Absolute Error): The MAE generally decreases with active learning, indicating that the average absolute difference between the model's predictions and the actual values decreases. A lower MAE indicates improved accuracy and precision.\n",
        "\n",
        "Explained Variance Score: The explained variance score measures how well the model's predictions explain the variance in the target variable. We can see an increasing trend in the explained variance score values with each query, indicating that the model's ability to explain the variance improves as it learns from additional labeled instances.\n",
        "\n",
        "Overall, the improvements in these metrics demonstrate that active learning helps enhance the model's performance by iteratively selecting informative instances for labeling."
      ],
      "metadata": {
        "id": "Y2poxjZlRM-O"
      }
    }
  ]
}
